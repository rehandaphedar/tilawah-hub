// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: recitation.sql

package sqlc

import (
	"context"
)

const recitationCreateRecitation = `-- name: RecitationCreateRecitation :one
INSERT INTO recitations(reciter, slug, name)
	VALUES (?1, ?2, ?3)
RETURNING slug, name, reciter
`

type RecitationCreateRecitationParams struct {
	Reciter string `json:"reciter"`
	Slug    string `json:"slug"`
	Name    string `json:"name"`
}

func (q *Queries) RecitationCreateRecitation(ctx context.Context, arg RecitationCreateRecitationParams) (Recitation, error) {
	row := q.db.QueryRowContext(ctx, recitationCreateRecitation, arg.Reciter, arg.Slug, arg.Name)
	var i Recitation
	err := row.Scan(&i.Slug, &i.Name, &i.Reciter)
	return i, err
}

const recitationDeleteRecitation = `-- name: RecitationDeleteRecitation :one
DELETE FROM recitations
WHERE
	reciter = ?1 AND slug = ?2
RETURNING slug, name, reciter
`

type RecitationDeleteRecitationParams struct {
	Reciter string `json:"reciter"`
	Slug    string `json:"slug"`
}

func (q *Queries) RecitationDeleteRecitation(ctx context.Context, arg RecitationDeleteRecitationParams) (Recitation, error) {
	row := q.db.QueryRowContext(ctx, recitationDeleteRecitation, arg.Reciter, arg.Slug)
	var i Recitation
	err := row.Scan(&i.Slug, &i.Name, &i.Reciter)
	return i, err
}

const recitationSelectRecitation = `-- name: RecitationSelectRecitation :one
SELECT
	slug, name, reciter
FROM
    recitations
WHERE
	reciter = ?1 AND slug = ?2
`

type RecitationSelectRecitationParams struct {
	Reciter string `json:"reciter"`
	Slug    string `json:"slug"`
}

func (q *Queries) RecitationSelectRecitation(ctx context.Context, arg RecitationSelectRecitationParams) (Recitation, error) {
	row := q.db.QueryRowContext(ctx, recitationSelectRecitation, arg.Reciter, arg.Slug)
	var i Recitation
	err := row.Scan(&i.Slug, &i.Name, &i.Reciter)
	return i, err
}

const recitationSelectRecitations = `-- name: RecitationSelectRecitations :many
SELECT
	slug, name, reciter
FROM
    recitations
`

func (q *Queries) RecitationSelectRecitations(ctx context.Context) ([]Recitation, error) {
	rows, err := q.db.QueryContext(ctx, recitationSelectRecitations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Recitation{}
	for rows.Next() {
		var i Recitation
		if err := rows.Scan(&i.Slug, &i.Name, &i.Reciter); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const recitationUpdateRecitation = `-- name: RecitationUpdateRecitation :one
UPDATE recitations
SET
	name = ?3
WHERE
	reciter = ?1 AND slug = ?2
RETURNING slug, name, reciter
`

type RecitationUpdateRecitationParams struct {
	Reciter string `json:"reciter"`
	Slug    string `json:"slug"`
	Name    string `json:"name"`
}

func (q *Queries) RecitationUpdateRecitation(ctx context.Context, arg RecitationUpdateRecitationParams) (Recitation, error) {
	row := q.db.QueryRowContext(ctx, recitationUpdateRecitation, arg.Reciter, arg.Slug, arg.Name)
	var i Recitation
	err := row.Scan(&i.Slug, &i.Name, &i.Reciter)
	return i, err
}
