// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: recitation_file.sql

package sqlc

import (
	"context"
)

const recitationFileCreateRecitationFile = `-- name: RecitationFileCreateRecitationFile :one
INSERT INTO recitation_files(reciter, slug, verse_key)
	VALUES (?1, ?2, ?3)
RETURNING reciter, slug, verse_key, has_timings, lafzize_processing
`

type RecitationFileCreateRecitationFileParams struct {
	Reciter  string `json:"reciter"`
	Slug     string `json:"slug"`
	VerseKey string `json:"verse_key"`
}

func (q *Queries) RecitationFileCreateRecitationFile(ctx context.Context, arg RecitationFileCreateRecitationFileParams) (RecitationFile, error) {
	row := q.db.QueryRowContext(ctx, recitationFileCreateRecitationFile, arg.Reciter, arg.Slug, arg.VerseKey)
	var i RecitationFile
	err := row.Scan(
		&i.Reciter,
		&i.Slug,
		&i.VerseKey,
		&i.HasTimings,
		&i.LafzizeProcessing,
	)
	return i, err
}

const recitationFileDeleteRecitationFile = `-- name: RecitationFileDeleteRecitationFile :one
DELETE FROM recitation_files
WHERE
	reciter = ?1 AND slug = ?2 AND verse_key = ?3
RETURNING reciter, slug, verse_key, has_timings, lafzize_processing
`

type RecitationFileDeleteRecitationFileParams struct {
	Reciter  string `json:"reciter"`
	Slug     string `json:"slug"`
	VerseKey string `json:"verse_key"`
}

func (q *Queries) RecitationFileDeleteRecitationFile(ctx context.Context, arg RecitationFileDeleteRecitationFileParams) (RecitationFile, error) {
	row := q.db.QueryRowContext(ctx, recitationFileDeleteRecitationFile, arg.Reciter, arg.Slug, arg.VerseKey)
	var i RecitationFile
	err := row.Scan(
		&i.Reciter,
		&i.Slug,
		&i.VerseKey,
		&i.HasTimings,
		&i.LafzizeProcessing,
	)
	return i, err
}

const recitationFileSelectRecitationFile = `-- name: RecitationFileSelectRecitationFile :one
SELECT
	reciter, slug, verse_key, has_timings, lafzize_processing
FROM
    recitation_files
WHERE
	reciter = ?1 AND slug = ?2 AND verse_key = ?3
`

type RecitationFileSelectRecitationFileParams struct {
	Reciter  string `json:"reciter"`
	Slug     string `json:"slug"`
	VerseKey string `json:"verse_key"`
}

func (q *Queries) RecitationFileSelectRecitationFile(ctx context.Context, arg RecitationFileSelectRecitationFileParams) (RecitationFile, error) {
	row := q.db.QueryRowContext(ctx, recitationFileSelectRecitationFile, arg.Reciter, arg.Slug, arg.VerseKey)
	var i RecitationFile
	err := row.Scan(
		&i.Reciter,
		&i.Slug,
		&i.VerseKey,
		&i.HasTimings,
		&i.LafzizeProcessing,
	)
	return i, err
}

const recitationFileSelectRecitationFiles = `-- name: RecitationFileSelectRecitationFiles :many
SELECT
	reciter, slug, verse_key, has_timings, lafzize_processing
FROM
    recitation_files
WHERE
	reciter = ?1 AND slug = ?2
`

type RecitationFileSelectRecitationFilesParams struct {
	Reciter string `json:"reciter"`
	Slug    string `json:"slug"`
}

func (q *Queries) RecitationFileSelectRecitationFiles(ctx context.Context, arg RecitationFileSelectRecitationFilesParams) ([]RecitationFile, error) {
	rows, err := q.db.QueryContext(ctx, recitationFileSelectRecitationFiles, arg.Reciter, arg.Slug)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RecitationFile{}
	for rows.Next() {
		var i RecitationFile
		if err := rows.Scan(
			&i.Reciter,
			&i.Slug,
			&i.VerseKey,
			&i.HasTimings,
			&i.LafzizeProcessing,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const recitationFileUpdateRecitationFile = `-- name: RecitationFileUpdateRecitationFile :one
UPDATE recitation_files
SET
	has_timings = ?4,
	lafzize_processing = ?5
WHERE
	reciter = ?1 AND slug = ?2 AND verse_key = ?3
RETURNING reciter, slug, verse_key, has_timings, lafzize_processing
`

type RecitationFileUpdateRecitationFileParams struct {
	Reciter           string `json:"reciter"`
	Slug              string `json:"slug"`
	VerseKey          string `json:"verse_key"`
	HasTimings        bool   `json:"has_timings"`
	LafzizeProcessing bool   `json:"lafzize_processing"`
}

func (q *Queries) RecitationFileUpdateRecitationFile(ctx context.Context, arg RecitationFileUpdateRecitationFileParams) (RecitationFile, error) {
	row := q.db.QueryRowContext(ctx, recitationFileUpdateRecitationFile,
		arg.Reciter,
		arg.Slug,
		arg.VerseKey,
		arg.HasTimings,
		arg.LafzizeProcessing,
	)
	var i RecitationFile
	err := row.Scan(
		&i.Reciter,
		&i.Slug,
		&i.VerseKey,
		&i.HasTimings,
		&i.LafzizeProcessing,
	)
	return i, err
}
