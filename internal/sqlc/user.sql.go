// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package sqlc

import (
	"context"
)

const userDeleteUser = `-- name: UserDeleteUser :one
DELETE FROM
	users
WHERE
	username = ?1
RETURNING
	username,
	displayname
`

type UserDeleteUserRow struct {
	Username    string `json:"username"`
	Displayname string `json:"displayname"`
}

func (q *Queries) UserDeleteUser(ctx context.Context, username string) (UserDeleteUserRow, error) {
	row := q.db.QueryRowContext(ctx, userDeleteUser, username)
	var i UserDeleteUserRow
	err := row.Scan(&i.Username, &i.Displayname)
	return i, err
}

const userSelectUser = `-- name: UserSelectUser :one
SELECT
    username, displayname
FROM
    users
WHERE
    username = ?1
`

type UserSelectUserRow struct {
	Username    string `json:"username"`
	Displayname string `json:"displayname"`
}

func (q *Queries) UserSelectUser(ctx context.Context, username string) (UserSelectUserRow, error) {
	row := q.db.QueryRowContext(ctx, userSelectUser, username)
	var i UserSelectUserRow
	err := row.Scan(&i.Username, &i.Displayname)
	return i, err
}

const userSelectUsers = `-- name: UserSelectUsers :many
SELECT
    username, displayname
FROM
    users
`

type UserSelectUsersRow struct {
	Username    string `json:"username"`
	Displayname string `json:"displayname"`
}

func (q *Queries) UserSelectUsers(ctx context.Context) ([]UserSelectUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, userSelectUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserSelectUsersRow{}
	for rows.Next() {
		var i UserSelectUsersRow
		if err := rows.Scan(&i.Username, &i.Displayname); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userUpdateUser = `-- name: UserUpdateUser :one
UPDATE users
SET
	displayname = ?2
WHERE
	username = ?1
RETURNING
	username,
	displayname
`

type UserUpdateUserParams struct {
	Username    string `json:"username"`
	Displayname string `json:"displayname"`
}

type UserUpdateUserRow struct {
	Username    string `json:"username"`
	Displayname string `json:"displayname"`
}

func (q *Queries) UserUpdateUser(ctx context.Context, arg UserUpdateUserParams) (UserUpdateUserRow, error) {
	row := q.db.QueryRowContext(ctx, userUpdateUser, arg.Username, arg.Displayname)
	var i UserUpdateUserRow
	err := row.Scan(&i.Username, &i.Displayname)
	return i, err
}
